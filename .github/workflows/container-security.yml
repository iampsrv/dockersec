name: container-security

on:
  pull_request:
  push:
    branches: [ master ]

jobs:
  hadolint-build-scan-sbom:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Hadolint (lint Dockerfile)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          config: .hadolint.yaml

      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image (load to local Docker for scanning)
        uses: docker/build-push-action@v6
        with:
          context: .
          tags: flaskapp:${{ github.sha }}
          load: true
          provenance: false

      - name: Trivy image scan (fail on High/Critical)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: flaskapp:${{ github.sha }}
          format: 'table'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
          ignore-unfixed: true

      - name: Trivy SBOM (CycloneDX)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: flaskapp:${{ github.sha }}
          format: 'cyclonedx'
          output: 'sbom.cdx.json'
          ignore-unfixed: true

      - name: Validate SBOM (CycloneDX CLI)
        run: |
          docker run --rm \
            -v "${{ github.workspace }}":/w -w /w \
            cyclonedx/cyclonedx-cli:latest \
            validate --input-file sbom.cdx.json
            
      - name: Grype SBOM scan (only fixed; fail on High+; JSON trimmed)
        shell: bash
        run: |
          set -euo pipefail

          # Run grype against the CycloneDX SBOM
          # Pin the image version for repeatability
          docker run --rm \
            -v "${GITHUB_WORKSPACE}":/w -w /w \
            anchore/grype:v0.97.0 \
            sbom:sbom.cdx.json \
            --only-fixed \
            --fail-on high \
            -o json \
          | tee grype-report-raw.json \
          | jq 'del(.ignoredMatches)
                | .matches |= map(select(.vulnerability.severity=="High" or .vulnerability.severity=="Critical"))' \
          > grype-report.json
          
      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-cyclonedx
          path: sbom.cdx.json

      - name: Upload Grype report (JSON)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: grype-report
          path: grype-report.json
          if-no-files-found: error
